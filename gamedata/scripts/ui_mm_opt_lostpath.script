class "lostpath_options" (CUIScriptWnd)

function lostpath_options:__init() super()
	self.m_preconditions = {}
	self.war_options = {}
	self.alife = {}
	self.map = {}
	
    self:InitControls()
    self:InitCallBacks()
	self.tab:SetActiveTab("war_options")
	
	SendScriptCallback("lp_menu_on_init",self)
	SendScriptCallback("lp_menu_alife_on_init",self)
	SendScriptCallback("lp_menu_map_on_init",self)
	
	local checks, lists, elements, checks1, lists1, checks2, lists2 = {}, {}, {}, {}, {}, {}, {}
	local _st 
	
	for cap,t in pairs(self.war_options) do
		if not (t.disabled) then
			_st = self.xml:InitStatic("tab_war_options:templ_item", nil)
			
			-- caption
			local ctrl = self.xml:InitStatic("tab_war_options:cap_check_axr",_st) -- ctrl needs scoped here because we pass it to wrapper or else ref will get replaced
			
			-- set caption text
			ctrl:TextControl():SetText(game.translate_string("ui_mm_"..cap))
			
			-- control
			if (t.typ == "check") then
				-- sort by name and type
				table.insert(checks,ctrl:TextControl():GetText())
				elements[ctrl:TextControl():GetText()] = _st
			
				-- create control
				ctrl = self.xml:InitCheck(t.tag or "tab_war_options:check_axr",_st)
				
				-- register for callbacks
				if (t.default ~= nil) then -- obviously dynamic axr option
					self:Register(ctrl,"ck_"..cap)
				end
			elseif(t.typ == "list") then 
				-- sort by name and type
				table.insert(lists,ctrl:TextControl():GetText())
				elements[ctrl:TextControl():GetText()] = _st
				
				-- create control
				ctrl = self.xml:InitComboBox(t.tag or "tab_war_options:list_axr",_st)
				
				-- setup the list
				if (t.list) then
					for i,v in ipairs(t.list) do 
						ctrl:AddItem(v,i-1)
					end
				end
		
				-- register for callbacks
				if (t.default ~= nil) then -- obviously dynamic axr option
					self:Register(ctrl,"lst_"..cap)
					if (t.on_list_item_select) then
						local _wrapper = function(handler) -- we need wrapper in order to pass ctrl to method
							t.on_list_item_select(handler,ctrl)
						end
						self:AddCallback("lst_"..cap,ui_events.LIST_ITEM_SELECT,_wrapper,self)
					end
				end
			end
			self.war_options[cap].ctrl = ctrl
		end
	end 
	
	table.sort(lists)
	table.sort(checks)
	
	for i=1,#lists do 
		-- add to UIScrollView
		self.gameplay_scroll_v:AddWindow(elements[lists[i]],true) 
		elements[lists[i]]:SetAutoDelete(false)
	end

	for i=1,#checks do 
		-- add to UIScrollView
		self.gameplay_scroll_v:AddWindow(elements[checks[i]],true) 
		elements[checks[i]]:SetAutoDelete(false)
	end
	
	for cap,t in pairs(self.alife) do
		if not (t.disabled) then
			_st = self.xml:InitStatic("tab_gameplay:templ_item", nil)
			
			-- caption
			local ctrl = self.xml:InitStatic("tab_gameplay:cap_check_axr",_st) -- ctrl needs scoped here because we pass it to wrapper or else ref will get replaced
			
			-- set caption text
			ctrl:TextControl():SetText(game.translate_string(""..cap))
			
			-- control
			if (t.typ == "check") then
				-- sort by name and type
				table.insert(checks1,ctrl:TextControl():GetText())
				elements[ctrl:TextControl():GetText()] = _st
			
				-- create control
				ctrl = self.xml:InitCheck(t.tag or "tab_gameplay:check_axr",_st)
				
				-- register for callbacks
				if (t.default ~= nil) then -- obviously dynamic axr option
					self:Register(ctrl,"ck_"..cap)
				end
			elseif(t.typ == "list") then 
				-- sort by name and type
				table.insert(lists1,ctrl:TextControl():GetText())
				elements[ctrl:TextControl():GetText()] = _st
				
				-- create control
				ctrl = self.xml:InitComboBox(t.tag or "tab_gameplay:list_axr",_st)
				
				-- setup the list
				if (t.list) then
					for i,v in ipairs(t.list) do 
						ctrl:AddItem(v,i-1)
					end
				end
		
				-- register for callbacks
				if (t.default ~= nil) then -- obviously dynamic axr option
					self:Register(ctrl,"lst_"..cap)
					if (t.on_list_item_select) then
						local _wrapper = function(handler) -- we need wrapper in order to pass ctrl to method
							t.on_list_item_select(handler,ctrl)
						end
						self:AddCallback("lst_"..cap,ui_events.LIST_ITEM_SELECT,_wrapper,self)
					end
				end
			end
			self.alife[cap].ctrl = ctrl
		end
	end 
	
	table.sort(lists1)
	table.sort(checks1)
	
	for i=1,#lists1 do 
		-- add to UIScrollView
		self.alife_scroll_v:AddWindow(elements[lists1[i]],true) 
		elements[lists1[i]]:SetAutoDelete(false)
	end

	for i=1,#checks1 do 
		-- add to UIScrollView
		self.alife_scroll_v:AddWindow(elements[checks1[i]],true) 
		elements[checks1[i]]:SetAutoDelete(false)
	end
	
	for cap,t in pairs(self.map) do
		if not (t.disabled) then
			_st = self.xml:InitStatic("tab_gameplay:templ_item", nil)
			
			-- caption
			local ctrl = self.xml:InitStatic("tab_gameplay:cap_check_axr",_st) -- ctrl needs scoped here because we pass it to wrapper or else ref will get replaced
			
			-- set caption text
			ctrl:TextControl():SetText(game.translate_string(""..cap))
			
			-- control
			if (t.typ == "check") then
				-- sort by name and type
				table.insert(checks2,ctrl:TextControl():GetText())
				elements[ctrl:TextControl():GetText()] = _st
			
				-- create control
				ctrl = self.xml:InitCheck(t.tag or "tab_gameplay:check_axr",_st)
				
				-- register for callbacks
				if (t.default ~= nil) then -- obviously dynamic axr option
					self:Register(ctrl,"ck_"..cap)
				end
			elseif(t.typ == "list") then 
				-- sort by name and type
				table.insert(lists2,ctrl:TextControl():GetText())
				elements[ctrl:TextControl():GetText()] = _st
				
				-- create control
				ctrl = self.xml:InitComboBox(t.tag or "tab_gameplay:list_axr",_st)
				
				-- setup the list
				if (t.list) then
					for i,v in ipairs(t.list) do 
						ctrl:AddItem(v,i-1)
					end
				end
		
				-- register for callbacks
				if (t.default ~= nil) then -- obviously dynamic axr option
					self:Register(ctrl,"lst_"..cap)
					if (t.on_list_item_select) then
						local _wrapper = function(handler) -- we need wrapper in order to pass ctrl to method
							t.on_list_item_select(handler,ctrl)
						end
						self:AddCallback("lst_"..cap,ui_events.LIST_ITEM_SELECT,_wrapper,self)
					end
				end
			end
			self.map[cap].ctrl = ctrl
		end
	end 
	
	table.sort(lists2)
	table.sort(checks2)
	
	for i=1,#lists2 do 
		-- add to UIScrollView
		self.map_scroll_v:AddWindow(elements[lists2[i]],true) 
		elements[lists2[i]]:SetAutoDelete(false)
	end

	for i=1,#checks2 do 
		-- add to UIScrollView
		self.map_scroll_v:AddWindow(elements[checks2[i]],true) 
		elements[checks2[i]]:SetAutoDelete(false)
	end
	
	-- auto-generate UI elements for Gameplay Tab	
	self.message_box = CUIMessageBoxEx()
end

function lostpath_options:__finalize()

end

function lostpath_options:InitControls()
	self:SetWndRect				(Frect():set(0,0,1024,768))
	self:Enable					(true)

	self.xml = CScriptXmlInit()
	local xml = self.xml
	xml:ParseFile				("ui_mm_opt.xml")

	local background = "background"
	
	local actor = db.actor
	local actor_faction = character_community(actor)
	
	--if(actor_faction ~= nil) then
	--	background = ui_menu.menu()
	--end
	
	self.scroll_v = xml:InitScrollView("tab_war_options:scroll_v", self)
	self.scroll_v_a = xml:InitScrollView("tab_alife:scroll_v", self)
	self.scroll_v_b = xml:InitScrollView("tab_map:scroll_v", self)
	xml:InitStatic					(background, self)
	
	self.dialog					= xml:InitStatic("main_lostpath_dialog:dialog", self)

	self.dlg_gameplay			= ui_mm_lp_opt_gameplay.opt_gameplay()
	self.dlg_gameplay:InitControls(0,0, xml, self)
	self.dlg_gameplay:Show		(false)
	self.dialog:AttachChild		(self.dlg_gameplay)
	xml:InitWindow				("tab_size", 0, self.dlg_gameplay)
	
	self.dlg_alife			= ui_mm_lp_opt_alife.opt_gameplay()
	self.dlg_alife:InitControls(0,0, xml, self)
	self.dlg_alife:Show		(false)
	self.dialog:AttachChild		(self.dlg_alife)
	xml:InitWindow				("tab_size", 0, self.dlg_alife)
	
	self.dlg_map			= ui_mm_lp_opt_map.opt_gameplay()
	self.dlg_map:InitControls(0,0, xml, self)
	self.dlg_map:Show		(false)
	self.dialog:AttachChild		(self.dlg_map)
	xml:InitWindow				("tab_size", 0, self.dlg_map)
	
	local btn
	btn = xml:Init3tButton		("main_dialog:btn_accept", self.dialog)
	self:Register				(btn, "btn_accept")
	btn = xml:Init3tButton		("main_dialog:btn_cancel", self.dialog)
	self:Register				(btn, "btn_cancel")
	btn = xml:Init3tButton		("main_dialog:btn_reset", self.dialog)
	self:Register				(btn, "btn_reset")
	
	self.tab					= xml:InitTab("main_lostpath_dialog:tab", self.dialog)
	self:Register				(self.tab, "tab")


	self.message_box			= CUIMessageBoxEx()
	self:Register				(self.message_box, "mb")

	self.b_restart_system_shown	= false
	self.timer					= nil
end

function lostpath_options:SetCurrentValues()
	SendScriptCallback("lp_menu_on_set_values",self,opt)
end

function lostpath_options:UpdateDependControls()
end

function lostpath_options:InitCallBacks()
	self:AddCallback("tab",					ui_events.TAB_CHANGED,		self.OnTabChange,			self)
	self:AddCallback("btn_accept",			ui_events.BUTTON_CLICKED,	self.OnBtnAccept,			self)
	self:AddCallback("btn_cancel",			ui_events.BUTTON_CLICKED,	self.OnBtnCancel,			self)
	self:AddCallback("btn_reset",			ui_events.BUTTON_CLICKED,	self.OnBtnReset,			self)
end

function lostpath_options:OnBtnCheckUpdates()
end

function lostpath_options:OnBtnKeybDefault()
end

function lostpath_options:OnPresetChanged()
end

function lostpath_options:OnBtnAccept()

	local opt		= COptionsManager()
	local console	= get_console()

	SendScriptCallback("lp_menu_on_accept",self,opt,console)
	SendScriptCallback("lp_menu_alife_on_accept",self,opt,console)
	SendScriptCallback("lp_menu_map_on_accept",self,opt,console)

	if opt:NeedVidRestart() then
		_G.b_discard_settings_shown = true
		self.message_box:InitMessageBox("message_box_yes_no")
		self.message_box:SetText(string.format("%s %d% s", game.translate_string("ui_mm_confirm_changes"), 15, game.translate_string("mp_si_sec")))
		self.message_box:ShowDialog(true)
	else
		self:OnApplyChanges()
	end

	opt:OptionsPostAccept()
end

function lostpath_options:OnBtnCancel()

	self.owner:ShowDialog(true)
	self:HideDialog()
	self.owner:Show(true)
end

function lostpath_options:OnBtnReset()
	local opt		= COptionsManager()
	local console	= get_console()

	lostpath_main_options.lp_menu_on_reset(self,opt,console)
	
	self.owner:ShowDialog(true)
	self:HideDialog()
	self.owner:Show(true)
end

function lostpath_options:OnTabChange()
	self.dlg_gameplay:Show	(false)
	self.dlg_alife:Show	(false)
	self.dlg_map:Show	(false)

	local ids = self.tab:GetActiveId()
	if ids == "war_options" then	
		self.dlg_gameplay:Show(true)
		
	elseif ids == "alife" then
		self.dlg_alife:Show(true)
		
	elseif ids == "map" then
		self.dlg_map:Show(true)
	end
end

function lostpath_options:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)

	if res == false then

		local bind = dik_to_bind(dik)

		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if dik == DIK_keys.DIK_ESCAPE then
					self.owner:ShowDialog(true)
					self:HideDialog()
					self.owner:Show(true)
			end
		end
	end

	return res
end

function lostpath_options:Update()
	CUIScriptWnd.Update(self)

	if(_G.b_discard_settings_shown) then
		local tg = math.floor(time_global_async()/1000)
		if(self.timer==nil) then
			self.timer = tg
		end
		self.message_box:SetText(string.format("%s %d %s", game.translate_string("ui_mm_confirm_changes"), 15-(tg-self.timer), game.translate_string("mp_si_sec")))
		if(tg-self.timer>=15) then
			if (self.message_box:IsShown()) then
				self.message_box:HideDialog()
			end
			self:OnDiscardChanges()
		end
	end
end

function lostpath_options:OnApplyChanges()
    self.timer = nil
    _G.b_discard_settings_shown = false

	self.owner:ShowDialog(true)
	if (self:IsShown()) then
		self:HideDialog()
	end
	self.owner:Show(true)
end

function lostpath_options:OnDiscardChanges()
    self.timer = nil
    _G.b_discard_settings_shown = false
	self:SetCurrentValues()
end

function lostpath_options:OnMenuReloaded()
	if(_G.b_discard_settings_shown) then
	    self.message_box:InitMessageBox("message_box_yes_no")
	    self.message_box:SetText(string.format("%s %d% s", game.translate_string("ui_mm_confirm_changes"), 15, game.translate_string("mp_si_sec")))
	    self.message_box:ShowDialog(true)
	end
end
